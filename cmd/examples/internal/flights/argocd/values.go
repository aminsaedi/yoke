// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package argocd

type Values struct {
	// ApplicationSet corresponds to the JSON schema field "applicationSet".
	ApplicationSet *ValuesApplicationSet `json:"applicationSet,omitempty" yaml:"applicationSet,omitempty" mapstructure:"applicationSet,omitempty"`

	// Kubernetes cluster domain name
	ClusterDomain string `json:"clusterDomain,omitempty" yaml:"clusterDomain,omitempty" mapstructure:"clusterDomain,omitempty"`

	// Annotations to add to all deployed objects
	CommonAnnotations ValuesCommonAnnotations `json:"commonAnnotations,omitempty" yaml:"commonAnnotations,omitempty" mapstructure:"commonAnnotations,omitempty"`

	// Labels to add to all deployed objects
	CommonLabels ValuesCommonLabels `json:"commonLabels,omitempty" yaml:"commonLabels,omitempty" mapstructure:"commonLabels,omitempty"`

	// Config corresponds to the JSON schema field "config".
	Config *ValuesConfig `json:"config,omitempty" yaml:"config,omitempty" mapstructure:"config,omitempty"`

	// Controller corresponds to the JSON schema field "controller".
	Controller *ValuesController `json:"controller,omitempty" yaml:"controller,omitempty" mapstructure:"controller,omitempty"`

	// Dex corresponds to the JSON schema field "dex".
	Dex *ValuesDex `json:"dex,omitempty" yaml:"dex,omitempty" mapstructure:"dex,omitempty"`

	// ExternalRedis corresponds to the JSON schema field "externalRedis".
	ExternalRedis *ValuesExternalRedis `json:"externalRedis,omitempty" yaml:"externalRedis,omitempty" mapstructure:"externalRedis,omitempty"`

	// Array of extra objects to deploy with the release
	ExtraDeploy []interface{} `json:"extraDeploy,omitempty" yaml:"extraDeploy,omitempty" mapstructure:"extraDeploy,omitempty"`

	// String to fully override common.names.fullname
	FullnameOverride string `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// Global corresponds to the JSON schema field "global".
	Global *ValuesGlobal `json:"global,omitempty" yaml:"global,omitempty" mapstructure:"global,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Override Kubernetes version
	KubeVersion string `json:"kubeVersion,omitempty" yaml:"kubeVersion,omitempty" mapstructure:"kubeVersion,omitempty"`

	// String to partially override common.names.fullname
	NameOverride string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// Notifications corresponds to the JSON schema field "notifications".
	Notifications *ValuesNotifications `json:"notifications,omitempty" yaml:"notifications,omitempty" mapstructure:"notifications,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// Redis corresponds to the JSON schema field "redis".
	Redis *ValuesRedis `json:"redis,omitempty" yaml:"redis,omitempty" mapstructure:"redis,omitempty"`

	// RedisWait corresponds to the JSON schema field "redisWait".
	RedisWait *ValuesRedisWait `json:"redisWait,omitempty" yaml:"redisWait,omitempty" mapstructure:"redisWait,omitempty"`

	// RepoServer corresponds to the JSON schema field "repoServer".
	RepoServer *ValuesRepoServer `json:"repoServer,omitempty" yaml:"repoServer,omitempty" mapstructure:"repoServer,omitempty"`

	// Server corresponds to the JSON schema field "server".
	Server *ValuesServer `json:"server,omitempty" yaml:"server,omitempty" mapstructure:"server,omitempty"`

	// VolumePermissions corresponds to the JSON schema field "volumePermissions".
	VolumePermissions *ValuesVolumePermissions `json:"volumePermissions,omitempty" yaml:"volumePermissions,omitempty" mapstructure:"volumePermissions,omitempty"`
}

type ValuesApplicationSet struct {
	// Affinity for Argo CD applicationSet controller pods assignment
	Affinity ValuesApplicationSetAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images). Overrides
	// the defaultArgs.
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesApplicationSetContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesApplicationSetContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesApplicationSetCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesApplicationSetCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// DefaultArgs corresponds to the JSON schema field "defaultArgs".
	DefaultArgs *ValuesApplicationSetDefaultArgs `json:"defaultArgs,omitempty" yaml:"defaultArgs,omitempty" mapstructure:"defaultArgs,omitempty"`

	// Enable ApplicationSet controller
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra arguments to the default arguments for the Argo CD applicationSet
	// controller
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD applicationSet
	// controller nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD applicationSet
	// controller nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD applicationSet
	// controller nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD
	// applicationSet controller container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD
	// applicationSet controller pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesApplicationSetLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Format for the Argo CD applicationSet controller logs. Options: [text, json]
	LogFormat string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// Log level for the Argo CD applicationSet controller
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesApplicationSetMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesApplicationSetNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesApplicationSetNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD applicationSet controller pods assignment
	NodeSelector ValuesApplicationSetNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `applicationSet.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD applicationSet controller pods
	PodAnnotations ValuesApplicationSetPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `applicationSet.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD applicationSet controller pods
	PodLabels ValuesApplicationSetPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesApplicationSetPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD applicationSet controller pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesApplicationSetReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// The number of ApplicationSet controller pods to run
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesApplicationSetResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// applicationSet.resources is set (applicationSet.resources is recommended for
	// production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesApplicationSetService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesApplicationSetServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Tolerations for Argo CD applicationSet controller pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesApplicationSetUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`

	// Webhook corresponds to the JSON schema field "webhook".
	Webhook *ValuesApplicationSetWebhook `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
}

// Affinity for Argo CD applicationSet controller pods assignment
type ValuesApplicationSetAffinity map[string]interface{}

type ValuesApplicationSetContainerPorts struct {
	// Argo CD applicationSet controller metrics port number
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// Argo CD applicationSet controller probe port number
	Probe float64 `json:"probe,omitempty" yaml:"probe,omitempty" mapstructure:"probe,omitempty"`
}

type ValuesApplicationSetContainerSecurityContext struct {
	// Set Argo CD applicationSet controller containers' Security Context
	// allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesApplicationSetContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD applicationSet controller containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set applicationSet container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD applicationSet controller containers' Security Context
	// readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD applicationSet controller containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD applicationSet controller container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD applicationSet controller containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesApplicationSetContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesApplicationSetContainerSecurityContextCapabilities struct {
	// Set Argo CD applicationSet controller containers' Security Context capabilities
	// to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesApplicationSetContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesApplicationSetCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesApplicationSetCustomReadinessProbe map[string]interface{}

type ValuesApplicationSetDefaultArgs struct {
	// Enable debug mode
	Debug bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// Enable dry-run mode
	DryRun bool `json:"dryRun,omitempty" yaml:"dryRun,omitempty" mapstructure:"dryRun,omitempty"`

	// Enable leader election
	EnableLeaderElection bool `json:"enableLeaderElection,omitempty" yaml:"enableLeaderElection,omitempty" mapstructure:"enableLeaderElection,omitempty"`

	// Default policy
	Policy string `json:"policy,omitempty" yaml:"policy,omitempty" mapstructure:"policy,omitempty"`
}

type ValuesApplicationSetLivenessProbe struct {
	// Enable livenessProbe on Argo CD applicationSet controller nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesApplicationSetMetrics struct {
	// Enable Argo CD applicationSet controller metrics
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesApplicationSetMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesApplicationSetMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesApplicationSetMetricsService struct {
	// Additional custom annotations for Argo CD applicationSet controller service
	Annotations ValuesApplicationSetMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD applicationSet controller metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD applicationSet controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Argo CD applicationSet controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD applicationSet controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the applicationSet controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD applicationSet controller metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesApplicationSetMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD applicationSet controller service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Argo CD applicationSet controller service
type ValuesApplicationSetMetricsServiceAnnotations map[string]interface{}

type ValuesApplicationSetMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesApplicationSetMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesApplicationSetMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesApplicationSetMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesApplicationSetNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesApplicationSetNodeAffinityPreset struct {
	// Node label key to match. Ignored if `applicationSet.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `applicationSet.affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `applicationSet.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD applicationSet controller pods assignment
type ValuesApplicationSetNodeSelector map[string]interface{}

// Annotations for Argo CD applicationSet controller pods
type ValuesApplicationSetPodAnnotations map[string]interface{}

// Extra labels for Argo CD applicationSet controller pods
type ValuesApplicationSetPodLabels map[string]interface{}

type ValuesApplicationSetPodSecurityContext struct {
	// Enabled Argo CD applicationSet controller pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD applicationSet controller pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesApplicationSetReadinessProbe struct {
	// Enable readinessProbe on Argo CD applicationSet controller nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesApplicationSetResources map[string]interface{}

type ValuesApplicationSetService struct {
	// Additional custom annotations for Argo CD applicationSet controller service
	Annotations ValuesApplicationSetServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD applicationSet controller service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD applicationSet controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Argo CD applicationSet controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD applicationSet controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for Argo CD applicationSet controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD applicationSet controller service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesApplicationSetServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD applicationSet controller service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesApplicationSetServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesApplicationSetServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the applicationSet controller service
	// account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesApplicationSetServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Argo CD applicationSet controller service
type ValuesApplicationSetServiceAnnotations map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesApplicationSetServiceSessionAffinityConfig map[string]interface{}

type ValuesApplicationSetUpdateStrategy struct {
	// Argo CD applicationSet controller statefulset strategy type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesApplicationSetWebhook struct {
	// Ingress corresponds to the JSON schema field "ingress".
	Ingress *ValuesApplicationSetWebhookIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`
}

type ValuesApplicationSetWebhookIngress struct {
	// Additional ingress annotations
	Annotations ValuesApplicationSetWebhookIngressAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enable an ingress resource for Webhooks
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Extra hosts array for the Argo CD applicationSet ingress
	ExtraHosts []interface{} `json:"extraHosts,omitempty" yaml:"extraHosts,omitempty" mapstructure:"extraHosts,omitempty"`

	// Extra paths for the Argo CD applicationSet ingress
	ExtraPaths []interface{} `json:"extraPaths,omitempty" yaml:"extraPaths,omitempty" mapstructure:"extraPaths,omitempty"`

	// Extra TLS configuration for the Argo CD applicationSet ingress
	ExtraTls []interface{} `json:"extraTls,omitempty" yaml:"extraTls,omitempty" mapstructure:"extraTls,omitempty"`

	// Ingress hostname for the Argo CD applicationSet ingress
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" mapstructure:"hostname,omitempty"`

	// Defines which ingress controller will implement the resource
	IngressClassName string `json:"ingressClassName,omitempty" yaml:"ingressClassName,omitempty" mapstructure:"ingressClassName,omitempty"`

	// Additional ingress labels
	Labels ValuesApplicationSetWebhookIngressLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Argo CD applicationSet ingress path
	Path string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
	PathType string `json:"pathType,omitempty" yaml:"pathType,omitempty" mapstructure:"pathType,omitempty"`

	// Ingress TLS configuration
	Tls []interface{} `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Additional ingress annotations
type ValuesApplicationSetWebhookIngressAnnotations map[string]interface{}

// Additional ingress labels
type ValuesApplicationSetWebhookIngressLabels map[string]interface{}

// Annotations to add to all deployed objects
type ValuesCommonAnnotations map[string]interface{}

// Labels to add to all deployed objects
type ValuesCommonLabels map[string]interface{}

type ValuesConfig struct {
	// Configure external cluster credentials
	ClusterCredentials []interface{} `json:"clusterCredentials,omitempty" yaml:"clusterCredentials,omitempty" mapstructure:"clusterCredentials,omitempty"`

	// Whether to create or not the extra known hosts configmap
	CreateExtraKnownHosts bool `json:"createExtraKnownHosts,omitempty" yaml:"createExtraKnownHosts,omitempty" mapstructure:"createExtraKnownHosts,omitempty"`

	// Use an existing styles configmap
	ExistingStylesConfigmap string `json:"existingStylesConfigmap,omitempty" yaml:"existingStylesConfigmap,omitempty" mapstructure:"existingStylesConfigmap,omitempty"`

	// Add extra known hosts to the known hosts list
	ExtraKnownHosts string `json:"extraKnownHosts,omitempty" yaml:"extraKnownHosts,omitempty" mapstructure:"extraKnownHosts,omitempty"`

	// GnuPG public keys to add to the keyring
	GpgKeys ValuesConfigGpgKeys `json:"gpgKeys,omitempty" yaml:"gpgKeys,omitempty" mapstructure:"gpgKeys,omitempty"`

	// Known hosts to be added to the known hosts list by default. Check the values to
	// see the default value
	KnownHosts string `json:"knownHosts,omitempty" yaml:"knownHosts,omitempty" mapstructure:"knownHosts,omitempty"`

	// Role-based authentication configuration
	Rbac ValuesConfigRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// Secret corresponds to the JSON schema field "secret".
	Secret *ValuesConfigSecret `json:"secret,omitempty" yaml:"secret,omitempty" mapstructure:"secret,omitempty"`

	// Custom CSS styles
	Styles string `json:"styles,omitempty" yaml:"styles,omitempty" mapstructure:"styles,omitempty"`

	// TLS certificates used to verify the authenticity of the repository servers
	TlsCerts ValuesConfigTlsCerts `json:"tlsCerts,omitempty" yaml:"tlsCerts,omitempty" mapstructure:"tlsCerts,omitempty"`
}

// GnuPG public keys to add to the keyring
type ValuesConfigGpgKeys map[string]interface{}

// Role-based authentication configuration
type ValuesConfigRbac map[string]interface{}

type ValuesConfigSecret struct {
	// General secret extra annotations
	Annotations ValuesConfigSecretAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD server admin password. Autogenerated by default.
	ArgocdServerAdminPassword string `json:"argocdServerAdminPassword,omitempty" yaml:"argocdServerAdminPassword,omitempty" mapstructure:"argocdServerAdminPassword,omitempty"`

	// Argo CD server password modification time
	ArgocdServerAdminPasswordMtime string `json:"argocdServerAdminPasswordMtime,omitempty" yaml:"argocdServerAdminPasswordMtime,omitempty" mapstructure:"argocdServerAdminPasswordMtime,omitempty"`

	// ArgocdServerTlsConfig corresponds to the JSON schema field
	// "argocdServerTlsConfig".
	ArgocdServerTlsConfig *ValuesConfigSecretArgocdServerTlsConfig `json:"argocdServerTlsConfig,omitempty" yaml:"argocdServerTlsConfig,omitempty" mapstructure:"argocdServerTlsConfig,omitempty"`

	// BitBucket secret to configure webhooks
	BitbucketServerSecret string `json:"bitbucketServerSecret,omitempty" yaml:"bitbucketServerSecret,omitempty" mapstructure:"bitbucketServerSecret,omitempty"`

	// BitBucket UUID to configure webhooks
	BitbucketUUID string `json:"bitbucketUUID,omitempty" yaml:"bitbucketUUID,omitempty" mapstructure:"bitbucketUUID,omitempty"`

	// Whether to create or not the secret
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Extra keys to add to the configuration secret.
	Extra ValuesConfigSecretExtra `json:"extra,omitempty" yaml:"extra,omitempty" mapstructure:"extra,omitempty"`

	// GitHub secret to configure webhooks
	GithubSecret string `json:"githubSecret,omitempty" yaml:"githubSecret,omitempty" mapstructure:"githubSecret,omitempty"`

	// GitLab secret to configure webhooks
	GitlabSecret string `json:"gitlabSecret,omitempty" yaml:"gitlabSecret,omitempty" mapstructure:"gitlabSecret,omitempty"`

	// Gogs secret to configure webhooks
	GogsSecret string `json:"gogsSecret,omitempty" yaml:"gogsSecret,omitempty" mapstructure:"gogsSecret,omitempty"`

	// Repository credentials to add to the Argo CD server confgi secret
	RepositoryCredentials ValuesConfigSecretRepositoryCredentials `json:"repositoryCredentials,omitempty" yaml:"repositoryCredentials,omitempty" mapstructure:"repositoryCredentials,omitempty"`
}

// General secret extra annotations
type ValuesConfigSecretAnnotations map[string]interface{}

type ValuesConfigSecretArgocdServerTlsConfig struct {
	// TLS certificate for the Argo CD config secret
	Crt string `json:"crt,omitempty" yaml:"crt,omitempty" mapstructure:"crt,omitempty"`

	// TLS key for the Argo CD config secret
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`
}

// Extra keys to add to the configuration secret.
type ValuesConfigSecretExtra map[string]interface{}

// Repository credentials to add to the Argo CD server confgi secret
type ValuesConfigSecretRepositoryCredentials map[string]interface{}

// TLS certificates used to verify the authenticity of the repository servers
type ValuesConfigTlsCerts map[string]interface{}

type ValuesController struct {
	// Affinity for Argo CD pods assignment
	Affinity ValuesControllerAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images). Overrides
	// the defaultArgs.
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Enable K8s cluster admin access for the application controller
	ClusterAdminAccess bool `json:"clusterAdminAccess,omitempty" yaml:"clusterAdminAccess,omitempty" mapstructure:"clusterAdminAccess,omitempty"`

	// Use custom rules for the application controller's cluster role
	ClusterRoleRules []interface{} `json:"clusterRoleRules,omitempty" yaml:"clusterRoleRules,omitempty" mapstructure:"clusterRoleRules,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesControllerContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesControllerContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesControllerCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesControllerCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesControllerCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// DefaultArgs corresponds to the JSON schema field "defaultArgs".
	DefaultArgs *ValuesControllerDefaultArgs `json:"defaultArgs,omitempty" yaml:"defaultArgs,omitempty" mapstructure:"defaultArgs,omitempty"`

	// Add extra arguments to the default arguments for the Argo CD controller
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Argo CD pods host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Add additional init containers to the Argo CD pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// for the Argo CD container(s) to automate configuration before or after startup
	LifecycleHooks ValuesControllerLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesControllerLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Format for the Argo CD application controller logs. Options: [text, json]
	LogFormat string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// Log level for the Argo CD application controller
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesControllerMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesControllerNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesControllerNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD pods assignment
	NodeSelector ValuesControllerNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `controller.affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD pods
	PodAnnotations ValuesControllerPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `controller.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD pods
	PodLabels ValuesControllerPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesControllerPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesControllerReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of Argo CD replicas to deploy
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesControllerResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// controller.resources is set (controller.resources is recommended for
	// production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the k8s scheduler (other than default)
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesControllerService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesControllerServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Enable shared process namespace in a pod.
	ShareProcessNamespace bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Add additional sidecar containers to the Argo CD pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesControllerStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Argo CD pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Topology Spread Constraints for pod assignment
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesControllerUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

// Affinity for Argo CD pods assignment
type ValuesControllerAffinity map[string]interface{}

type ValuesControllerContainerPorts struct {
	// Argo CD application controller port number
	Controller float64 `json:"controller,omitempty" yaml:"controller,omitempty" mapstructure:"controller,omitempty"`

	// Argo CD application controller metrics port number
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesControllerContainerSecurityContext struct {
	// Set Argo CD containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesControllerContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set controller container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD containers' Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesControllerContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesControllerContainerSecurityContextCapabilities struct {
	// Set Argo CD containers' Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesControllerContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesControllerCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesControllerCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesControllerCustomStartupProbe map[string]interface{}

type ValuesControllerDefaultArgs struct {
	// Default application resync period for Argo CD controller
	AppResyncPeriod string `json:"appResyncPeriod,omitempty" yaml:"appResyncPeriod,omitempty" mapstructure:"appResyncPeriod,omitempty"`

	// Default operation processors for Argo CD controller
	OperationProcessors string `json:"operationProcessors,omitempty" yaml:"operationProcessors,omitempty" mapstructure:"operationProcessors,omitempty"`

	// Default self heal timeout for Argo CD controller
	SelfHealTimeout string `json:"selfHealTimeout,omitempty" yaml:"selfHealTimeout,omitempty" mapstructure:"selfHealTimeout,omitempty"`

	// Default status processors for Argo CD controller
	StatusProcessors string `json:"statusProcessors,omitempty" yaml:"statusProcessors,omitempty" mapstructure:"statusProcessors,omitempty"`
}

// for the Argo CD container(s) to automate configuration before or after startup
type ValuesControllerLifecycleHooks map[string]interface{}

type ValuesControllerLivenessProbe struct {
	// Enable livenessProbe on Argo CD nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesControllerMetrics struct {
	// Enable Argo CD application controller metrics
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Rules corresponds to the JSON schema field "rules".
	Rules *ValuesControllerMetricsRules `json:"rules,omitempty" yaml:"rules,omitempty" mapstructure:"rules,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesControllerMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesControllerMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesControllerMetricsRules struct {
	// Additional lables to add to the PrometheusRule object
	AdditionalLabels ValuesControllerMetricsRulesAdditionalLabels `json:"additionalLabels,omitempty" yaml:"additionalLabels,omitempty" mapstructure:"additionalLabels,omitempty"`

	// Enable render extra rules for PrometheusRule object
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Namespace where to create the PrometheusRule object
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Selector for the PrometheusRule object
	Selector ValuesControllerMetricsRulesSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`

	// Rules to render into the PrometheusRule object
	Spec []interface{} `json:"spec,omitempty" yaml:"spec,omitempty" mapstructure:"spec,omitempty"`
}

// Additional lables to add to the PrometheusRule object
type ValuesControllerMetricsRulesAdditionalLabels map[string]interface{}

// Selector for the PrometheusRule object
type ValuesControllerMetricsRulesSelector map[string]interface{}

type ValuesControllerMetricsService struct {
	// Additional custom annotations for Argo CD application controller service
	Annotations ValuesControllerMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD application controller metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD application controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Argo CD application controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD application controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the application controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD application controller metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesControllerMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD application controller service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Argo CD application controller service
type ValuesControllerMetricsServiceAnnotations map[string]interface{}

type ValuesControllerMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesControllerMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesControllerMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesControllerMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesControllerNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesControllerNodeAffinityPreset struct {
	// Node label key to match. Ignored if `controller.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `controller.affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `controller.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD pods assignment
type ValuesControllerNodeSelector map[string]interface{}

// Annotations for Argo CD pods
type ValuesControllerPodAnnotations map[string]interface{}

// Extra labels for Argo CD pods
type ValuesControllerPodLabels map[string]interface{}

type ValuesControllerPodSecurityContext struct {
	// Enabled Argo CD pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesControllerReadinessProbe struct {
	// Enable readinessProbe on Argo CD nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesControllerResources map[string]interface{}

type ValuesControllerService struct {
	// Additional custom annotations for Argo CD application controller service
	Annotations ValuesControllerServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD application controller service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD application controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Argo CD application controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD application controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for Argo CD application controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD application controller service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesControllerServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesControllerServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesControllerServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the application controller service account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesControllerServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Argo CD application controller service
type ValuesControllerServiceAnnotations map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesControllerServiceSessionAffinityConfig map[string]interface{}

type ValuesControllerStartupProbe struct {
	// Enable startupProbe on Argo CD nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesControllerUpdateStrategy struct {
	// Argo CD statefulset strategy type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesDex struct {
	// Affinity for Dex pods assignment
	Affinity ValuesDexAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesDexContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesDexContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesDexCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesDexCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesDexCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable the creation of a Dex deployment for SSO
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra args to the default args for Dex
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Dex nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Dex nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Dex nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Dex
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Dex pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Dex pods host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesDexImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Add additional init containers to the Dex pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// for the Dex container(s) to automate configuration before or after startup
	LifecycleHooks ValuesDexLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesDexLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesDexMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesDexNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesDexNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Dex pods assignment
	NodeSelector ValuesDexNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `dex.affinity` is set. Allowed values: `soft`
	// or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Dex pods
	PodAnnotations ValuesDexPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `dex.affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Dex pods
	PodLabels ValuesDexPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesDexPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Dex pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesDexReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of Dex replicas to deploy
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesDexResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if dex.resources
	// is set (dex.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the k8s scheduler (other than default)
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesDexService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesDexServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Enable shared process namespace in a pod.
	ShareProcessNamespace bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Add additional sidecar containers to the Dex pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesDexStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Dex pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Topology Spread Constraints for pod assignment
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesDexUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

// Affinity for Dex pods assignment
type ValuesDexAffinity map[string]interface{}

type ValuesDexContainerPorts struct {
	// Dex gRPC port
	Grpc float64 `json:"grpc,omitempty" yaml:"grpc,omitempty" mapstructure:"grpc,omitempty"`

	// Dex container HTTP port
	Http float64 `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`

	// Dex metrics port
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesDexContainerSecurityContext struct {
	// Set Dex containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesDexContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Dex containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set dex container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Dex containers' server Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Dex containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Dex containers' Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Dex containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesDexContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesDexContainerSecurityContextCapabilities struct {
	// Set Argo CD containers' repo server Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesDexContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesDexCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesDexCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesDexCustomStartupProbe map[string]interface{}

type ValuesDexImage struct {
	// Enable Dex image debug mode
	Debug bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// Dex image digest in the way sha256:aa.... Please note this parameter, if set,
	// will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Dex image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Dex image pull secrets
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Dex image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Dex image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

// for the Dex container(s) to automate configuration before or after startup
type ValuesDexLifecycleHooks map[string]interface{}

type ValuesDexLivenessProbe struct {
	// Enable livenessProbe on Dex nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesDexMetrics struct {
	// Enable metrics service for Dex
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesDexMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesDexMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesDexMetricsService struct {
	// Additional custom annotations for Dex service
	Annotations ValuesDexMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Dex service metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Dex service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Dex service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Dex service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the Dex service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Dex metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesDexMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Dex service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Dex service
type ValuesDexMetricsServiceAnnotations map[string]interface{}

type ValuesDexMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesDexMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesDexMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesDexMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesDexNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesDexNodeAffinityPreset struct {
	// Node label key to match. Ignored if `dex.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `dex.affinity` is set. Allowed values:
	// `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `dex.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Dex pods assignment
type ValuesDexNodeSelector map[string]interface{}

// Annotations for Dex pods
type ValuesDexPodAnnotations map[string]interface{}

// Extra labels for Dex pods
type ValuesDexPodLabels map[string]interface{}

type ValuesDexPodSecurityContext struct {
	// Enabled Dex pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Dex pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesDexReadinessProbe struct {
	// Enable readinessProbe on Dex nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesDexResources map[string]interface{}

type ValuesDexService struct {
	// Additional custom annotations for Dex service
	Annotations ValuesDexServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Dex service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Dex service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Dex service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Dex service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// NodePorts corresponds to the JSON schema field "nodePorts".
	NodePorts *ValuesDexServiceNodePorts `json:"nodePorts,omitempty" yaml:"nodePorts,omitempty" mapstructure:"nodePorts,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesDexServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesDexServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Dex service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesDexServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesDexServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the Dex service account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created for Dex
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesDexServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Dex service
type ValuesDexServiceAnnotations map[string]interface{}

type ValuesDexServiceNodePorts struct {
	// gRPC node port for the Dex service
	Grpc string `json:"grpc,omitempty" yaml:"grpc,omitempty" mapstructure:"grpc,omitempty"`

	// HTTP node port for the Dex service
	Http string `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`
}

type ValuesDexServicePorts struct {
	// Dex grpc service port
	Grpc float64 `json:"grpc,omitempty" yaml:"grpc,omitempty" mapstructure:"grpc,omitempty"`

	// Dex HTTP service port
	Http float64 `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`
}

// Additional settings for the sessionAffinity
type ValuesDexServiceSessionAffinityConfig map[string]interface{}

type ValuesDexStartupProbe struct {
	// Enable startupProbe on Dex nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesDexUpdateStrategy struct {
	// Dex statefulset strategy type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesExternalRedis struct {
	// Existing secret for the external redis
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`

	// Password key for the existing secret containing the external redis password
	ExistingSecretPasswordKey string `json:"existingSecretPasswordKey,omitempty" yaml:"existingSecretPasswordKey,omitempty" mapstructure:"existingSecretPasswordKey,omitempty"`

	// External Redis host
	Host string `json:"host,omitempty" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// External Redis password
	Password string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// External Redis port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesGlobal struct {
	// Compatibility corresponds to the JSON schema field "compatibility".
	Compatibility *ValuesGlobalCompatibility `json:"compatibility,omitempty" yaml:"compatibility,omitempty" mapstructure:"compatibility,omitempty"`

	// Global Docker registry secret names as an array
	ImagePullSecrets []interface{} `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// Global Docker image registry
	ImageRegistry string `json:"imageRegistry,omitempty" yaml:"imageRegistry,omitempty" mapstructure:"imageRegistry,omitempty"`

	// Global StorageClass for Persistent Volume(s)
	StorageClass string `json:"storageClass,omitempty" yaml:"storageClass,omitempty" mapstructure:"storageClass,omitempty"`
}

type ValuesGlobalCompatibility struct {
	// Openshift corresponds to the JSON schema field "openshift".
	Openshift *ValuesGlobalCompatibilityOpenshift `json:"openshift,omitempty" yaml:"openshift,omitempty" mapstructure:"openshift,omitempty"`
}

type ValuesGlobalCompatibilityOpenshift struct {
	// Adapt the securityContext sections of the deployment to make them compatible
	// with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and
	// let the platform use their allowed default IDs. Possible values: auto (apply if
	// the detected running cluster is Openshift), force (perform the adaptation
	// always), disabled (do not perform adaptation)
	AdaptSecurityContext string `json:"adaptSecurityContext,omitempty" yaml:"adaptSecurityContext,omitempty" mapstructure:"adaptSecurityContext,omitempty"`
}

type ValuesImage struct {
	// Enable Argo CD image debug mode
	Debug bool `json:"debug,omitempty" yaml:"debug,omitempty" mapstructure:"debug,omitempty"`

	// Argo CD image digest in the way sha256:aa.... Please note this parameter, if
	// set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Argo CD image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Argo CD image pull secrets
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Argo CD image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Argo CD image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

type ValuesNotifications struct {
	// Affinity for Argo CD notifications controller pods assignment
	Affinity ValuesNotificationsAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images).
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Bots corresponds to the JSON schema field "bots".
	Bots *ValuesNotificationsBots `json:"bots,omitempty" yaml:"bots,omitempty" mapstructure:"bots,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesNotificationsContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesNotificationsContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesNotificationsCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesNotificationsCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesNotificationsCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable notifications controller
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra arguments to the default arguments for the Argo CD notifications
	// controller
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD notifications
	// controller nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD notifications
	// controller nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD notifications
	// controller nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD
	// notifications controller container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD
	// notifications controller pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesNotificationsLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Format for the Argo CD notifications controller logs. Options: [text, json]
	LogFormat string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// Log level for the Argo CD notifications controller
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesNotificationsMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesNotificationsNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesNotificationsNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD notifications controller pods assignment
	NodeSelector ValuesNotificationsNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `notifications.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD notifications controller pods
	PodAnnotations ValuesNotificationsPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `notifications.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD notifications controller pods
	PodLabels ValuesNotificationsPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesNotificationsPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD notifications controller pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesNotificationsReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesNotificationsResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// notifications.resources is set (notifications.resources is recommended for
	// production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesNotificationsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesNotificationsServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesNotificationsStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Argo CD notifications controller pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Webhook corresponds to the JSON schema field "webhook".
	Webhook *ValuesNotificationsWebhook `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
}

// Affinity for Argo CD notifications controller pods assignment
type ValuesNotificationsAffinity map[string]interface{}

type ValuesNotificationsBots struct {
	// Slack corresponds to the JSON schema field "slack".
	Slack *ValuesNotificationsBotsSlack `json:"slack,omitempty" yaml:"slack,omitempty" mapstructure:"slack,omitempty"`
}

type ValuesNotificationsBotsSlack struct {
	// Affinity for Argo CD Slack bot pods assignment
	Affinity ValuesNotificationsBotsSlackAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images).
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesNotificationsBotsSlackContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesNotificationsBotsSlackContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesNotificationsBotsSlackCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesNotificationsBotsSlackCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesNotificationsBotsSlackCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Enable notifications controller
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra arguments to the default arguments for the Argo CD Slack bot
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD Slack bot nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD Slack bot
	// nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD Slack bot nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD Slack
	// bot container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD Slack bot
	// pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesNotificationsBotsSlackLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesNotificationsBotsSlackNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesNotificationsBotsSlackNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD Slack bot pods assignment
	NodeSelector ValuesNotificationsBotsSlackNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `notifications.bots.slack.affinity` is set.
	// Allowed values: `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD Slack bot pods
	PodAnnotations ValuesNotificationsBotsSlackPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `notifications.bots.slack.affinity` is
	// set. Allowed values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD Slack bot pods
	PodLabels ValuesNotificationsBotsSlackPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesNotificationsBotsSlackPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD Slack bot pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesNotificationsBotsSlackReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesNotificationsBotsSlackResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// notifications.bots.slack.resources is set (notifications.bots.slack.resources
	// is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesNotificationsBotsSlackService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesNotificationsBotsSlackServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesNotificationsBotsSlackStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Argo CD Slack bot pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`
}

// Affinity for Argo CD Slack bot pods assignment
type ValuesNotificationsBotsSlackAffinity map[string]interface{}

type ValuesNotificationsBotsSlackContainerPorts struct {
	// Slack Bot controller metrics port number
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesNotificationsBotsSlackContainerSecurityContext struct {
	// Set Argo CD Slack bot containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesNotificationsBotsSlackContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD Slack bot containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set notifications container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD Slack bot containers' Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD Slack bot containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD Slack bot container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD Slack bot containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesNotificationsBotsSlackContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesNotificationsBotsSlackContainerSecurityContextCapabilities struct {
	// Set Argo CD Slack bot containers' Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesNotificationsBotsSlackContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesNotificationsBotsSlackCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesNotificationsBotsSlackCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesNotificationsBotsSlackCustomStartupProbe map[string]interface{}

type ValuesNotificationsBotsSlackLivenessProbe struct {
	// Enable livenessProbe on Slack Bot nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesNotificationsBotsSlackNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesNotificationsBotsSlackNodeAffinityPreset struct {
	// Node label key to match. Ignored if `notifications.bots.slack.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `notifications.bots.slack.affinity` is
	// set. Allowed values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `notifications.bots.slack.affinity` is
	// set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD Slack bot pods assignment
type ValuesNotificationsBotsSlackNodeSelector map[string]interface{}

// Annotations for Argo CD Slack bot pods
type ValuesNotificationsBotsSlackPodAnnotations map[string]interface{}

// Extra labels for Argo CD Slack bot pods
type ValuesNotificationsBotsSlackPodLabels map[string]interface{}

type ValuesNotificationsBotsSlackPodSecurityContext struct {
	// Enabled Argo CD Slack bot pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD Slack bot pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesNotificationsBotsSlackReadinessProbe struct {
	// Enable readinessProbe on Slack Bot nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesNotificationsBotsSlackResources map[string]interface{}

type ValuesNotificationsBotsSlackService struct {
	// Additional custom annotations for Argo CD Slack bot service
	Annotations ValuesNotificationsBotsSlackServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD Slack bot service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD Slack bot service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Argo CD Slack bot service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD Slack bot service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for Argo CD Slack bot service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD Slack bot service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesNotificationsBotsSlackServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD Slack bot service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesNotificationsBotsSlackServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesNotificationsBotsSlackServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the notifications controller service
	// account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesNotificationsBotsSlackServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Argo CD Slack bot service
type ValuesNotificationsBotsSlackServiceAnnotations map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesNotificationsBotsSlackServiceSessionAffinityConfig map[string]interface{}

type ValuesNotificationsBotsSlackStartupProbe struct {
	// Enable startupProbe on Slack Bot nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesNotificationsContainerPorts struct {
	// Argo CD notifications controller metrics port number
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesNotificationsContainerSecurityContext struct {
	// Set Argo CD notifications controller containers' Security Context
	// allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesNotificationsContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD notifications controller containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set notifications container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD notifications controller containers' Security Context
	// readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD notifications controller containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD notifications controller container's Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD notifications controller containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesNotificationsContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesNotificationsContainerSecurityContextCapabilities struct {
	// Set Argo CD notifications controller containers' Security Context capabilities
	// to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesNotificationsContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesNotificationsCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesNotificationsCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesNotificationsCustomStartupProbe map[string]interface{}

type ValuesNotificationsLivenessProbe struct {
	// Enable livenessProbe on Notification nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesNotificationsMetrics struct {
	// Enable Argo CD notifications controller metrics
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesNotificationsMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesNotificationsMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesNotificationsMetricsService struct {
	// Additional custom annotations for Argo CD notifications controller service
	Annotations ValuesNotificationsMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD notifications controller metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD notifications controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Argo CD notifications controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD notifications controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the notifications controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD notifications controller metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesNotificationsMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD notifications controller service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Argo CD notifications controller service
type ValuesNotificationsMetricsServiceAnnotations map[string]interface{}

type ValuesNotificationsMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesNotificationsMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesNotificationsMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesNotificationsMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesNotificationsNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesNotificationsNodeAffinityPreset struct {
	// Node label key to match. Ignored if `notifications.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `notifications.affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `notifications.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD notifications controller pods assignment
type ValuesNotificationsNodeSelector map[string]interface{}

// Annotations for Argo CD notifications controller pods
type ValuesNotificationsPodAnnotations map[string]interface{}

// Extra labels for Argo CD notifications controller pods
type ValuesNotificationsPodLabels map[string]interface{}

type ValuesNotificationsPodSecurityContext struct {
	// Enabled Argo CD notifications controller pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD notifications controller pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesNotificationsReadinessProbe struct {
	// Enable readinessProbe on Notification nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesNotificationsResources map[string]interface{}

type ValuesNotificationsService struct {
	// Additional custom annotations for Argo CD notifications controller service
	Annotations ValuesNotificationsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD notifications controller service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD notifications controller service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Argo CD notifications controller service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD notifications controller service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for Argo CD notifications controller service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD notifications controller service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesNotificationsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD notifications controller service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesNotificationsServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesNotificationsServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the notifications controller service
	// account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesNotificationsServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Argo CD notifications controller service
type ValuesNotificationsServiceAnnotations map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesNotificationsServiceSessionAffinityConfig map[string]interface{}

type ValuesNotificationsStartupProbe struct {
	// Enable startupProbe on Notification nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesNotificationsWebhook struct {
	// Ingress corresponds to the JSON schema field "ingress".
	Ingress *ValuesNotificationsWebhookIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`
}

type ValuesNotificationsWebhookIngress struct {
	// Additional ingress annotations
	Annotations ValuesNotificationsWebhookIngressAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enable an ingress resource for Webhooks
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Extra hosts array for the Argo CD notifications ingress
	ExtraHosts []interface{} `json:"extraHosts,omitempty" yaml:"extraHosts,omitempty" mapstructure:"extraHosts,omitempty"`

	// Extra paths for the Argo CD notifications ingress
	ExtraPaths []interface{} `json:"extraPaths,omitempty" yaml:"extraPaths,omitempty" mapstructure:"extraPaths,omitempty"`

	// Extra TLS configuration for the Argo CD notifications ingress
	ExtraTls []interface{} `json:"extraTls,omitempty" yaml:"extraTls,omitempty" mapstructure:"extraTls,omitempty"`

	// Ingress hostname for the Argo CD notifications ingress
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" mapstructure:"hostname,omitempty"`

	// Defines which ingress controller will implement the resource
	IngressClassName string `json:"ingressClassName,omitempty" yaml:"ingressClassName,omitempty" mapstructure:"ingressClassName,omitempty"`

	// Additional ingress labels
	Labels ValuesNotificationsWebhookIngressLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Argo CD notifications ingress path
	Path string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
	PathType string `json:"pathType,omitempty" yaml:"pathType,omitempty" mapstructure:"pathType,omitempty"`

	// Ingress TLS configuration
	Tls []interface{} `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Additional ingress annotations
type ValuesNotificationsWebhookIngressAnnotations map[string]interface{}

// Additional ingress labels
type ValuesNotificationsWebhookIngressLabels map[string]interface{}

type ValuesRbac struct {
	// Specifies whether RBAC resources should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`
}

type ValuesRedis struct {
	// Redis&reg; architecture. Allowed values: `standalone` or `replication`
	Architecture string `json:"architecture,omitempty" yaml:"architecture,omitempty" mapstructure:"architecture,omitempty"`

	// Auth corresponds to the JSON schema field "auth".
	Auth *ValuesRedisAuth `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Enable Redis dependency
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesRedisImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Name override for the Redis dependency
	NameOverride string `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesRedisService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
}

type ValuesRedisAuth struct {
	// Enable Redis dependency authentication
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Existing secret to load redis dependency password
	ExistingSecret string `json:"existingSecret,omitempty" yaml:"existingSecret,omitempty" mapstructure:"existingSecret,omitempty"`

	// Pasword key name inside the existing secret
	ExistingSecretPasswordKey string `json:"existingSecretPasswordKey,omitempty" yaml:"existingSecretPasswordKey,omitempty" mapstructure:"existingSecretPasswordKey,omitempty"`
}

type ValuesRedisImage struct {
	// Redis image digest in the way sha256:aa.... Please note this parameter, if set,
	// will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// Redis image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Redis image pull secrets
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// Redis image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Redis image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

type ValuesRedisService struct {
	// Service port for Redis dependency
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesRedisWait struct {
	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesRedisWaitContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Enables waiting for redis
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Additional arguments for the redis-cli call, such as TLS
	ExtraArgs string `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`
}

type ValuesRedisWaitContainerSecurityContext struct {
	// Set Argo CD repo server containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesRedisWaitContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD repo server containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set redisWait container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD containers' repo server Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesRedisWaitContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesRedisWaitContainerSecurityContextCapabilities struct {
	// Set Argo CD containers' repo server Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesRedisWaitContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesRepoServer struct {
	// Affinity for Argo CD repo server pods assignment
	Affinity ValuesRepoServerAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Autoscaling corresponds to the JSON schema field "autoscaling".
	Autoscaling *ValuesRepoServerAutoscaling `json:"autoscaling,omitempty" yaml:"autoscaling,omitempty" mapstructure:"autoscaling,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesRepoServerContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesRepoServerContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesRepoServerCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesRepoServerCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesRepoServerCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// Add extra args to the default repo server args
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD repo server nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD repo server
	// nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD repo server nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD repo
	// server container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD repo server
	// pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Argo CD repo server pods host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Add additional init containers to the Argo CD repo server pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// for the Argo CD repo server container(s) to automate configuration before or
	// after startup
	LifecycleHooks ValuesRepoServerLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesRepoServerLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// Format for the Argo CD repo server logs. Options: [text, json]
	LogFormat string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// Log level for the Argo CD repo server
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesRepoServerMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesRepoServerNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesRepoServerNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD repo server pods assignment
	NodeSelector ValuesRepoServerNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `repoServer.affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD repo server pods
	PodAnnotations ValuesRepoServerPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `repoServer.affinity` is set. Allowed
	// values: `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD repo server pods
	PodLabels ValuesRepoServerPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesRepoServerPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD repo server pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesRepoServerReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of Argo CD repo server replicas to deploy
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesRepoServerResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// repoServer.resources is set (repoServer.resources is recommended for
	// production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the k8s scheduler (other than default)
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesRepoServerService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesRepoServerServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Enable shared process namespace in a pod.
	ShareProcessNamespace bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Add additional sidecar containers to the Argo CD repo server pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesRepoServerStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Argo CD repo server pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Topology Spread Constraints for pod assignment
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesRepoServerUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`
}

// Affinity for Argo CD repo server pods assignment
type ValuesRepoServerAffinity map[string]interface{}

type ValuesRepoServerAutoscaling struct {
	// Enable Argo CD repo server deployment autoscaling
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Argo CD repo server deployment autoscaling maximum number of replicas
	MaxReplicas float64 `json:"maxReplicas,omitempty" yaml:"maxReplicas,omitempty" mapstructure:"maxReplicas,omitempty"`

	// Argo CD repo server deployment autoscaling minimum number of replicas
	MinReplicas float64 `json:"minReplicas,omitempty" yaml:"minReplicas,omitempty" mapstructure:"minReplicas,omitempty"`

	// Argo CD repo server deployment autoscaling target CPU percentage
	TargetCPU float64 `json:"targetCPU,omitempty" yaml:"targetCPU,omitempty" mapstructure:"targetCPU,omitempty"`

	// Argo CD repo server deployment autoscaling target CPU memory
	TargetMemory float64 `json:"targetMemory,omitempty" yaml:"targetMemory,omitempty" mapstructure:"targetMemory,omitempty"`
}

type ValuesRepoServerContainerPorts struct {
	// Metrics port for Argo CD repo server
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// Container port for Argo CD repo server
	RepoServer float64 `json:"repoServer,omitempty" yaml:"repoServer,omitempty" mapstructure:"repoServer,omitempty"`
}

type ValuesRepoServerContainerSecurityContext struct {
	// Set Argo CD repo server containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesRepoServerContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD repo server containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set repoServer container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD containers' repo server Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD repo server containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesRepoServerContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesRepoServerContainerSecurityContextCapabilities struct {
	// Set Argo CD containers' repo server Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesRepoServerContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesRepoServerCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesRepoServerCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesRepoServerCustomStartupProbe map[string]interface{}

// for the Argo CD repo server container(s) to automate configuration before or
// after startup
type ValuesRepoServerLifecycleHooks map[string]interface{}

type ValuesRepoServerLivenessProbe struct {
	// Enable livenessProbe on Argo CD repo server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesRepoServerMetrics struct {
	// Enable metrics for the Argo CD repo server
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesRepoServerMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesRepoServerMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesRepoServerMetricsService struct {
	// Additional custom annotations for Argo CD repo server service
	Annotations ValuesRepoServerMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD repo server metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD repo server service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Argo CD repo server service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD repo server service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the repo server metrics service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD repo server metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesRepoServerMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD repo server service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Argo CD repo server service
type ValuesRepoServerMetricsServiceAnnotations map[string]interface{}

type ValuesRepoServerMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesRepoServerMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesRepoServerMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesRepoServerMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesRepoServerNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesRepoServerNodeAffinityPreset struct {
	// Node label key to match. Ignored if `repoServer.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `repoServer.affinity` is set. Allowed
	// values: `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `repoServer.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD repo server pods assignment
type ValuesRepoServerNodeSelector map[string]interface{}

// Annotations for Argo CD repo server pods
type ValuesRepoServerPodAnnotations map[string]interface{}

// Extra labels for Argo CD repo server pods
type ValuesRepoServerPodLabels map[string]interface{}

type ValuesRepoServerPodSecurityContext struct {
	// Enabled Argo CD repo server pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD repo server pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesRepoServerReadinessProbe struct {
	// Enable readinessProbe on Argo CD repo server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesRepoServerResources map[string]interface{}

type ValuesRepoServerService struct {
	// Additional custom annotations for Repo server service
	Annotations ValuesRepoServerServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Repo server service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Repo server service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Repo server service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Repo server service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for the repo server service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Repo server service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesRepoServerServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Repo server service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesRepoServerServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesRepoServerServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the repo server service account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount for repo server should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount for repo server to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesRepoServerServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Repo server service
type ValuesRepoServerServiceAnnotations map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesRepoServerServiceSessionAffinityConfig map[string]interface{}

type ValuesRepoServerStartupProbe struct {
	// Enable startupProbe on Argo CD repo server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesRepoServerUpdateStrategy struct {
	// Argo CD repo server statefulset strategy type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesServer struct {
	// Affinity for Argo CD server pods assignment
	Affinity ValuesServerAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// Override default container args (useful when using custom images)
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Mount Service Account token in pod
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Autoscaling corresponds to the JSON schema field "autoscaling".
	Autoscaling *ValuesServerAutoscaling `json:"autoscaling,omitempty" yaml:"autoscaling,omitempty" mapstructure:"autoscaling,omitempty"`

	// Override default container command (useful when using custom images)
	Command []interface{} `json:"command,omitempty" yaml:"command,omitempty" mapstructure:"command,omitempty"`

	// Enable Argo CD server config
	ConfigEnabled bool `json:"configEnabled,omitempty" yaml:"configEnabled,omitempty" mapstructure:"configEnabled,omitempty"`

	// ContainerPorts corresponds to the JSON schema field "containerPorts".
	ContainerPorts *ValuesServerContainerPorts `json:"containerPorts,omitempty" yaml:"containerPorts,omitempty" mapstructure:"containerPorts,omitempty"`

	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesServerContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Custom livenessProbe that overrides the default one
	CustomLivenessProbe ValuesServerCustomLivenessProbe `json:"customLivenessProbe,omitempty" yaml:"customLivenessProbe,omitempty" mapstructure:"customLivenessProbe,omitempty"`

	// Custom readinessProbe that overrides the default one
	CustomReadinessProbe ValuesServerCustomReadinessProbe `json:"customReadinessProbe,omitempty" yaml:"customReadinessProbe,omitempty" mapstructure:"customReadinessProbe,omitempty"`

	// Custom startupProbe that overrides the default one
	CustomStartupProbe ValuesServerCustomStartupProbe `json:"customStartupProbe,omitempty" yaml:"customStartupProbe,omitempty" mapstructure:"customStartupProbe,omitempty"`

	// concat to the default args
	ExtraArgs []interface{} `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// Array with extra environment variables to add to Argo CD server nodes
	ExtraEnvVars []interface{} `json:"extraEnvVars,omitempty" yaml:"extraEnvVars,omitempty" mapstructure:"extraEnvVars,omitempty"`

	// Name of existing ConfigMap containing extra env vars for Argo CD server nodes
	ExtraEnvVarsCM string `json:"extraEnvVarsCM,omitempty" yaml:"extraEnvVarsCM,omitempty" mapstructure:"extraEnvVarsCM,omitempty"`

	// Name of existing Secret containing extra env vars for Argo CD server nodes
	ExtraEnvVarsSecret string `json:"extraEnvVarsSecret,omitempty" yaml:"extraEnvVarsSecret,omitempty" mapstructure:"extraEnvVarsSecret,omitempty"`

	// Optionally specify extra list of additional volumeMounts for the Argo CD server
	// container(s)
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Optionally specify extra list of additional volumes for the Argo CD server
	// pod(s)
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// Argo CD server pods host aliases
	HostAliases []interface{} `json:"hostAliases,omitempty" yaml:"hostAliases,omitempty" mapstructure:"hostAliases,omitempty"`

	// Ingress corresponds to the JSON schema field "ingress".
	Ingress *ValuesServerIngress `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`

	// IngressGrpc corresponds to the JSON schema field "ingressGrpc".
	IngressGrpc *ValuesServerIngressGrpc `json:"ingressGrpc,omitempty" yaml:"ingressGrpc,omitempty" mapstructure:"ingressGrpc,omitempty"`

	// Add additional init containers to the Argo CD server pod(s)
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// Disable HTTPS redirection for Argo CD server
	Insecure bool `json:"insecure,omitempty" yaml:"insecure,omitempty" mapstructure:"insecure,omitempty"`

	// for the Argo CD server container(s) to automate configuration before or after
	// startup
	LifecycleHooks ValuesServerLifecycleHooks `json:"lifecycleHooks,omitempty" yaml:"lifecycleHooks,omitempty" mapstructure:"lifecycleHooks,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesServerLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// ArgoCD server logs format. Options: [text, json]
	LogFormat string `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// ArgoCD server logs level
	LogLevel string `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// Metrics corresponds to the JSON schema field "metrics".
	Metrics *ValuesServerMetrics `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`

	// NetworkPolicy corresponds to the JSON schema field "networkPolicy".
	NetworkPolicy *ValuesServerNetworkPolicy `json:"networkPolicy,omitempty" yaml:"networkPolicy,omitempty" mapstructure:"networkPolicy,omitempty"`

	// NodeAffinityPreset corresponds to the JSON schema field "nodeAffinityPreset".
	NodeAffinityPreset *ValuesServerNodeAffinityPreset `json:"nodeAffinityPreset,omitempty" yaml:"nodeAffinityPreset,omitempty" mapstructure:"nodeAffinityPreset,omitempty"`

	// Node labels for Argo CD server pods assignment
	NodeSelector ValuesServerNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// Pod affinity preset. Ignored if `server.affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAffinityPreset string `json:"podAffinityPreset,omitempty" yaml:"podAffinityPreset,omitempty" mapstructure:"podAffinityPreset,omitempty"`

	// Annotations for Argo CD server pods
	PodAnnotations ValuesServerPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// Pod anti-affinity preset. Ignored if `server.affinity` is set. Allowed values:
	// `soft` or `hard`
	PodAntiAffinityPreset string `json:"podAntiAffinityPreset,omitempty" yaml:"podAntiAffinityPreset,omitempty" mapstructure:"podAntiAffinityPreset,omitempty"`

	// Extra labels for Argo CD server pods
	PodLabels ValuesServerPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesServerPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Argo CD server pods' priorityClassName
	PriorityClassName string `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesServerReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Number of Argo CD server replicas to deploy
	ReplicaCount float64 `json:"replicaCount,omitempty" yaml:"replicaCount,omitempty" mapstructure:"replicaCount,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesServerResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// server.resources is set (server.resources is recommended for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`

	// Name of the runtime class to be used by pod(s)
	RuntimeClassName string `json:"runtimeClassName,omitempty" yaml:"runtimeClassName,omitempty" mapstructure:"runtimeClassName,omitempty"`

	// Name of the k8s scheduler (other than default)
	SchedulerName string `json:"schedulerName,omitempty" yaml:"schedulerName,omitempty" mapstructure:"schedulerName,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesServerService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesServerServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// Enable shared process namespace in a pod.
	ShareProcessNamespace bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Add additional sidecar containers to the Argo CD server pod(s)
	Sidecars []interface{} `json:"sidecars,omitempty" yaml:"sidecars,omitempty" mapstructure:"sidecars,omitempty"`

	// StartupProbe corresponds to the JSON schema field "startupProbe".
	StartupProbe *ValuesServerStartupProbe `json:"startupProbe,omitempty" yaml:"startupProbe,omitempty" mapstructure:"startupProbe,omitempty"`

	// Tolerations for Argo CD server pods assignment
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// Topology Spread Constraints for pod assignment
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// UpdateStrategy corresponds to the JSON schema field "updateStrategy".
	UpdateStrategy *ValuesServerUpdateStrategy `json:"updateStrategy,omitempty" yaml:"updateStrategy,omitempty" mapstructure:"updateStrategy,omitempty"`

	// Argo CD server base URL. Required when configuring SSO. Required when enabling
	// dex.
	Url string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// Affinity for Argo CD server pods assignment
type ValuesServerAffinity map[string]interface{}

type ValuesServerAutoscaling struct {
	// Enable Argo CD server deployment autoscaling
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Argo CD server deployment autoscaling maximum number of replicas
	MaxReplicas float64 `json:"maxReplicas,omitempty" yaml:"maxReplicas,omitempty" mapstructure:"maxReplicas,omitempty"`

	// Argo CD server deployment autoscaling minimum number of replicas
	MinReplicas float64 `json:"minReplicas,omitempty" yaml:"minReplicas,omitempty" mapstructure:"minReplicas,omitempty"`

	// Argo CD server deployment autoscaling target CPU percentage
	TargetCPU float64 `json:"targetCPU,omitempty" yaml:"targetCPU,omitempty" mapstructure:"targetCPU,omitempty"`

	// Argo CD server deployment autoscaling target CPU memory
	TargetMemory float64 `json:"targetMemory,omitempty" yaml:"targetMemory,omitempty" mapstructure:"targetMemory,omitempty"`
}

type ValuesServerContainerPorts struct {
	// Argo CD server HTTP container port
	Http float64 `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`

	// Argo CD server HTTPS container port
	Https float64 `json:"https,omitempty" yaml:"https,omitempty" mapstructure:"https,omitempty"`

	// Argo CD server metrics container port
	Metrics float64 `json:"metrics,omitempty" yaml:"metrics,omitempty" mapstructure:"metrics,omitempty"`
}

type ValuesServerContainerSecurityContext struct {
	// Set Argo CD server containers' Security Context allowPrivilegeEscalation
	AllowPrivilegeEscalation bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesServerContainerSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Enabled Argo CD server containers' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set server container's Security Context privileged
	Privileged bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// Set Argo CD containers' server Security Context readOnlyRootFilesystem
	ReadOnlyRootFilesystem bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// Set Argo CD server containers' Security Context runAsGroup
	RunAsGroup float64 `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// Set Argo CD server containers' Security Context runAsNonRoot
	RunAsNonRoot bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// Set Argo CD server containers' Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesServerContainerSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesServerContainerSecurityContextCapabilities struct {
	// Set Argo CD containers' server Security Context capabilities to be dropped
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesServerContainerSecurityContextSeccompProfile struct {
	// Set container's Security Context seccomp profile
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Custom livenessProbe that overrides the default one
type ValuesServerCustomLivenessProbe map[string]interface{}

// Custom readinessProbe that overrides the default one
type ValuesServerCustomReadinessProbe map[string]interface{}

// Custom startupProbe that overrides the default one
type ValuesServerCustomStartupProbe map[string]interface{}

type ValuesServerIngress struct {
	// Annotations for the Argo CD server ingress. To enable certificate
	// autogeneration, place here your cert-manager annotations.
	Annotations ValuesServerIngressAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Ingress API version for the Argo CD server ingress
	ApiVersion string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty" mapstructure:"apiVersion,omitempty"`

	// Enable the creation of an ingress for the Argo CD server
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Extra hosts array for the Argo CD server ingress
	ExtraHosts []interface{} `json:"extraHosts,omitempty" yaml:"extraHosts,omitempty" mapstructure:"extraHosts,omitempty"`

	// Extra paths for the Argo CD server ingress
	ExtraPaths []interface{} `json:"extraPaths,omitempty" yaml:"extraPaths,omitempty" mapstructure:"extraPaths,omitempty"`

	// Additional rules to be covered with this ingress record
	ExtraRules []interface{} `json:"extraRules,omitempty" yaml:"extraRules,omitempty" mapstructure:"extraRules,omitempty"`

	// Extra TLS configuration for the Argo CD server ingress
	ExtraTls []interface{} `json:"extraTls,omitempty" yaml:"extraTls,omitempty" mapstructure:"extraTls,omitempty"`

	// Ingress hostname for the Argo CD server ingress
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" mapstructure:"hostname,omitempty"`

	// IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
	IngressClassName string `json:"ingressClassName,omitempty" yaml:"ingressClassName,omitempty" mapstructure:"ingressClassName,omitempty"`

	// Path array for the Argo CD server ingress
	Path string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Path type for the Argo CD server ingress
	PathType string `json:"pathType,omitempty" yaml:"pathType,omitempty" mapstructure:"pathType,omitempty"`

	// Secrets array to mount into the Ingress
	Secrets []interface{} `json:"secrets,omitempty" yaml:"secrets,omitempty" mapstructure:"secrets,omitempty"`

	// Create a TLS secret for this ingress record using self-signed certificates
	// generated by Helm
	SelfSigned bool `json:"selfSigned,omitempty" yaml:"selfSigned,omitempty" mapstructure:"selfSigned,omitempty"`

	// Enable TLS for the Argo CD server ingress
	Tls bool `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Annotations for the Argo CD server ingress. To enable certificate
// autogeneration, place here your cert-manager annotations.
type ValuesServerIngressAnnotations map[string]interface{}

type ValuesServerIngressGrpc struct {
	// Annotations for the Argo CD gRPC server ingress. To enable certificate
	// autogeneration, place here your cert-manager annotations
	Annotations ValuesServerIngressGrpcAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Ingress API version for the Argo CD gRPC server ingress
	ApiVersion string `json:"apiVersion,omitempty" yaml:"apiVersion,omitempty" mapstructure:"apiVersion,omitempty"`

	// Enable the creation of an ingress for the Argo CD gRPC server
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Extra hosts array for the Argo CD gRPC server ingress
	ExtraHosts []interface{} `json:"extraHosts,omitempty" yaml:"extraHosts,omitempty" mapstructure:"extraHosts,omitempty"`

	// Extra paths for the Argo CD gRPC server ingress
	ExtraPaths []interface{} `json:"extraPaths,omitempty" yaml:"extraPaths,omitempty" mapstructure:"extraPaths,omitempty"`

	// Additional rules to be covered with this ingress record
	ExtraRules []interface{} `json:"extraRules,omitempty" yaml:"extraRules,omitempty" mapstructure:"extraRules,omitempty"`

	// Extra TLS configuration for the Argo CD gRPC server ingress
	ExtraTls []interface{} `json:"extraTls,omitempty" yaml:"extraTls,omitempty" mapstructure:"extraTls,omitempty"`

	// Ingress hostname for the Argo CD gRPC server ingress
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" mapstructure:"hostname,omitempty"`

	// IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
	IngressClassName string `json:"ingressClassName,omitempty" yaml:"ingressClassName,omitempty" mapstructure:"ingressClassName,omitempty"`

	// Path array for the Argo CD gRPC server ingress
	Path string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Path type for the Argo CD gRPC server ingress
	PathType string `json:"pathType,omitempty" yaml:"pathType,omitempty" mapstructure:"pathType,omitempty"`

	// Secrets array to mount into the Ingress
	Secrets []interface{} `json:"secrets,omitempty" yaml:"secrets,omitempty" mapstructure:"secrets,omitempty"`

	// Create a TLS secret for this ingress record using self-signed certificates
	// generated by Helm
	SelfSigned bool `json:"selfSigned,omitempty" yaml:"selfSigned,omitempty" mapstructure:"selfSigned,omitempty"`

	// Enable TLS for the Argo CD server ingress
	Tls bool `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// Annotations for the Argo CD gRPC server ingress. To enable certificate
// autogeneration, place here your cert-manager annotations
type ValuesServerIngressGrpcAnnotations map[string]interface{}

// for the Argo CD server container(s) to automate configuration before or after
// startup
type ValuesServerLifecycleHooks map[string]interface{}

type ValuesServerLivenessProbe struct {
	// Enable livenessProbe on Argo CD server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for livenessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for livenessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for livenessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for livenessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for livenessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesServerMetrics struct {
	// Enable metrics for the Argo CD server
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesServerMetricsService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesServerMetricsServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesServerMetricsService struct {
	// Additional custom annotations for Argo CD server service
	Annotations ValuesServerMetricsServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD server metrics service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD server service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Argo CD server service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD server service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// Node port for Argo CD server metrics service
	NodePort string `json:"nodePort,omitempty" yaml:"nodePort,omitempty" mapstructure:"nodePort,omitempty"`

	// Argo CD server metrics service port
	Port float64 `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesServerMetricsServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD server service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// Additional custom annotations for Argo CD server service
type ValuesServerMetricsServiceAnnotations map[string]interface{}

type ValuesServerMetricsServiceMonitor struct {
	// Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// honorLabels chooses the metric's labels on collisions with target labels
	HonorLabels bool `json:"honorLabels,omitempty" yaml:"honorLabels,omitempty" mapstructure:"honorLabels,omitempty"`

	// Interval at which metrics should be scraped
	Interval string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// The name of the label on the target service to use as the job name in
	// prometheus.
	JobLabel string `json:"jobLabel,omitempty" yaml:"jobLabel,omitempty" mapstructure:"jobLabel,omitempty"`

	// MetricRelabelConfigs to apply to samples before ingestion
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace which Prometheus is running in
	Namespace string `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// RelabelConfigs to apply to samples before scraping
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Timeout after which the scrape is ended
	ScrapeTimeout string `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// ServiceMonitor selector labels
	Selector ValuesServerMetricsServiceMonitorSelector `json:"selector,omitempty" yaml:"selector,omitempty" mapstructure:"selector,omitempty"`
}

// ServiceMonitor selector labels
type ValuesServerMetricsServiceMonitorSelector map[string]interface{}

// Additional settings for the sessionAffinity
type ValuesServerMetricsServiceSessionAffinityConfig map[string]interface{}

type ValuesServerNetworkPolicy struct {
	// Don't require server label for connections
	AllowExternal bool `json:"allowExternal,omitempty" yaml:"allowExternal,omitempty" mapstructure:"allowExternal,omitempty"`

	// Allow the pod to access any range of port and all destinations.
	AllowExternalEgress bool `json:"allowExternalEgress,omitempty" yaml:"allowExternalEgress,omitempty" mapstructure:"allowExternalEgress,omitempty"`

	// Specifies whether a NetworkPolicy should be created
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Add extra ingress rules to the NetworkPolicy (ignored if
	// allowExternalEgress=true)
	ExtraEgress []string `json:"extraEgress,omitempty" yaml:"extraEgress,omitempty" mapstructure:"extraEgress,omitempty"`

	// Add extra ingress rules to the NetworkPolice
	ExtraIngress []string `json:"extraIngress,omitempty" yaml:"extraIngress,omitempty" mapstructure:"extraIngress,omitempty"`

	// List of possible endpoints to kube-apiserver (limit to your cluster settings to
	// increase security)
	KubeAPIServerPorts []string `json:"kubeAPIServerPorts,omitempty" yaml:"kubeAPIServerPorts,omitempty" mapstructure:"kubeAPIServerPorts,omitempty"`
}

type ValuesServerNodeAffinityPreset struct {
	// Node label key to match. Ignored if `server.affinity` is set
	Key string `json:"key,omitempty" yaml:"key,omitempty" mapstructure:"key,omitempty"`

	// Node affinity preset type. Ignored if `server.affinity` is set. Allowed values:
	// `soft` or `hard`
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Node label values to match. Ignored if `server.affinity` is set
	Values []interface{} `json:"values,omitempty" yaml:"values,omitempty" mapstructure:"values,omitempty"`
}

// Node labels for Argo CD server pods assignment
type ValuesServerNodeSelector map[string]interface{}

// Annotations for Argo CD server pods
type ValuesServerPodAnnotations map[string]interface{}

// Extra labels for Argo CD server pods
type ValuesServerPodLabels map[string]interface{}

type ValuesServerPodSecurityContext struct {
	// Enabled Argo CD server pods' Security Context
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Set Argo CD server pod's Security Context fsGroup
	FsGroup float64 `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// Set filesystem group change policy
	FsGroupChangePolicy string `json:"fsGroupChangePolicy,omitempty" yaml:"fsGroupChangePolicy,omitempty" mapstructure:"fsGroupChangePolicy,omitempty"`

	// Set filesystem extra groups
	SupplementalGroups []interface{} `json:"supplementalGroups,omitempty" yaml:"supplementalGroups,omitempty" mapstructure:"supplementalGroups,omitempty"`

	// Set kernel settings using the sysctl interface
	Sysctls []interface{} `json:"sysctls,omitempty" yaml:"sysctls,omitempty" mapstructure:"sysctls,omitempty"`
}

type ValuesServerReadinessProbe struct {
	// Enable readinessProbe on Argo CD server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for readinessProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for readinessProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for readinessProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for readinessProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for readinessProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesServerResources map[string]interface{}

type ValuesServerService struct {
	// Additional custom annotations for Argo CD service
	Annotations ValuesServerServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Argo CD service Cluster IP
	ClusterIP string `json:"clusterIP,omitempty" yaml:"clusterIP,omitempty" mapstructure:"clusterIP,omitempty"`

	// Argo CD service external traffic policy
	ExternalTrafficPolicy string `json:"externalTrafficPolicy,omitempty" yaml:"externalTrafficPolicy,omitempty" mapstructure:"externalTrafficPolicy,omitempty"`

	// Extra ports to expose (normally used with the `sidecar` value)
	ExtraPorts []interface{} `json:"extraPorts,omitempty" yaml:"extraPorts,omitempty" mapstructure:"extraPorts,omitempty"`

	// Argo CD service Load Balancer IP
	LoadBalancerIP string `json:"loadBalancerIP,omitempty" yaml:"loadBalancerIP,omitempty" mapstructure:"loadBalancerIP,omitempty"`

	// Argo CD service Load Balancer sources
	LoadBalancerSourceRanges []interface{} `json:"loadBalancerSourceRanges,omitempty" yaml:"loadBalancerSourceRanges,omitempty" mapstructure:"loadBalancerSourceRanges,omitempty"`

	// NodePorts corresponds to the JSON schema field "nodePorts".
	NodePorts *ValuesServerServiceNodePorts `json:"nodePorts,omitempty" yaml:"nodePorts,omitempty" mapstructure:"nodePorts,omitempty"`

	// Ports corresponds to the JSON schema field "ports".
	Ports *ValuesServerServicePorts `json:"ports,omitempty" yaml:"ports,omitempty" mapstructure:"ports,omitempty"`

	// Session Affinity for Kubernetes service, can be "None" or "ClientIP"
	SessionAffinity string `json:"sessionAffinity,omitempty" yaml:"sessionAffinity,omitempty" mapstructure:"sessionAffinity,omitempty"`

	// Additional settings for the sessionAffinity
	SessionAffinityConfig ValuesServerServiceSessionAffinityConfig `json:"sessionAffinityConfig,omitempty" yaml:"sessionAffinityConfig,omitempty" mapstructure:"sessionAffinityConfig,omitempty"`

	// Argo CD service type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesServerServiceAccount struct {
	// Annotations for service account. Evaluated as a template. Only used if `create`
	// is `true`.
	Annotations ValuesServerServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Automount service account token for the server service account
	AutomountServiceAccountToken bool `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Specifies whether a ServiceAccount should be created
	Create bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// The name of the ServiceAccount to use.
	Name string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// Annotations for service account. Evaluated as a template. Only used if `create`
// is `true`.
type ValuesServerServiceAccountAnnotations map[string]interface{}

// Additional custom annotations for Argo CD service
type ValuesServerServiceAnnotations map[string]interface{}

type ValuesServerServiceNodePorts struct {
	// Node port for HTTP
	Http string `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`

	// Node port for HTTPS
	Https string `json:"https,omitempty" yaml:"https,omitempty" mapstructure:"https,omitempty"`
}

type ValuesServerServicePorts struct {
	// HTTP port for the gRPC ingress when enabled
	Http float64 `json:"http,omitempty" yaml:"http,omitempty" mapstructure:"http,omitempty"`

	// HTTPS port for the gRPC ingress when enabled
	Https float64 `json:"https,omitempty" yaml:"https,omitempty" mapstructure:"https,omitempty"`
}

// Additional settings for the sessionAffinity
type ValuesServerServiceSessionAffinityConfig map[string]interface{}

type ValuesServerStartupProbe struct {
	// Enable startupProbe on Argo CD server nodes
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Failure threshold for startupProbe
	FailureThreshold float64 `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// Initial delay seconds for startupProbe
	InitialDelaySeconds float64 `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// Period seconds for startupProbe
	PeriodSeconds float64 `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// Success threshold for startupProbe
	SuccessThreshold float64 `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// Timeout seconds for startupProbe
	TimeoutSeconds float64 `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesServerUpdateStrategy struct {
	// Argo CD server statefulset strategy type
	Type string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesVolumePermissions struct {
	// ContainerSecurityContext corresponds to the JSON schema field
	// "containerSecurityContext".
	ContainerSecurityContext *ValuesVolumePermissionsContainerSecurityContext `json:"containerSecurityContext,omitempty" yaml:"containerSecurityContext,omitempty" mapstructure:"containerSecurityContext,omitempty"`

	// Enable init container that changes the owner/group of the PV mount point to
	// `runAsUser:fsGroup`
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesVolumePermissionsImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Set container requests and limits for different resources like CPU or memory
	// (essential for production workloads)
	Resources ValuesVolumePermissionsResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Set container resources according to one common preset (allowed values: none,
	// nano, small, medium, large, xlarge, 2xlarge). This is ignored if
	// volumePermissions.resources is set (volumePermissions.resources is recommended
	// for production).
	ResourcesPreset string `json:"resourcesPreset,omitempty" yaml:"resourcesPreset,omitempty" mapstructure:"resourcesPreset,omitempty"`
}

type ValuesVolumePermissionsContainerSecurityContext struct {
	// Set init container's Security Context runAsUser
	RunAsUser float64 `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`
}

type ValuesVolumePermissionsImage struct {
	// OS Shell + Utility image digest in the way sha256:aa.... Please note this
	// parameter, if set, will override the tag
	Digest string `json:"digest,omitempty" yaml:"digest,omitempty" mapstructure:"digest,omitempty"`

	// OS Shell + Utility image pull policy
	PullPolicy string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// OS Shell + Utility image pull secrets
	PullSecrets []interface{} `json:"pullSecrets,omitempty" yaml:"pullSecrets,omitempty" mapstructure:"pullSecrets,omitempty"`

	// OS Shell + Utility image registry
	Registry string `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// OS Shell + Utility image repository
	Repository string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
}

// Set container requests and limits for different resources like CPU or memory
// (essential for production workloads)
type ValuesVolumePermissionsResources map[string]interface{}
